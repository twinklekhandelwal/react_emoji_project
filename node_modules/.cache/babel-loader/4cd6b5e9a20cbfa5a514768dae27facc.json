{"ast":null,"code":"var _jsxFileName = \"/home/ravina/Desktop/React_project/Emoji/src/input.js\";\nimport React, { Component } from 'react';\nimport './index.css';\nimport Headers from './emoji';\n\nclass inputlist extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = () => {\n      this.setState({\n        query: this.search.value\n      });\n    };\n\n    this.copyToClipboard = e => {\n      this.input.select();\n      document.execCommand('copy'); // This is just personal preference.\n      // I prefer to not show the the whole text area selected.\n\n      e.target.focus();\n      this.setState({\n        copySuccess: 'Copied!'\n      });\n    };\n\n    this.state = {\n      a: 'twinkle',\n      copySuccess: ''\n    };\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      ref: input => this.search = input,\n      value: \"Some text to copy\",\n      onChange: this.handleInputChange,\n      class: \"searchinput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }));\n  }\n\n} //     render(){\n//         return(<div className=\"component-search-input\">\n//         <div>\n//           <input type=\"text\" class=\"searchinput\" />\n//         </div>\n//       </div>)\n//     }\n// }\n\n\nexport default inputlist;","map":{"version":3,"sources":["/home/ravina/Desktop/React_project/Emoji/src/input.js"],"names":["React","Component","Headers","inputlist","constructor","props","handleInputChange","setState","query","search","value","copyToClipboard","e","input","select","document","execCommand","target","focus","copySuccess","state","a","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,aAAP;AACA,OAAOC,OAAP,MAAqB,SAArB;;AACA,MAAMC,SAAN,SAAwBF,SAAxB,CAAkC;AACjCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;;AADkB,SAMnBC,iBANmB,GAMC,MAAM;AACzB,WAAKC,QAAL,CAAc;AACbC,QAAAA,KAAK,EAAE,KAAKC,MAAL,CAAYC;AADN,OAAd;AAGA,KAVkB;;AAAA,SAWnBC,eAXmB,GAWAC,CAAD,IAAO;AACxB,WAAKC,KAAL,CAAWC,MAAX;AACAC,MAAAA,QAAQ,CAACC,WAAT,CAAqB,MAArB,EAFwB,CAGxB;AACA;;AACAJ,MAAAA,CAAC,CAACK,MAAF,CAASC,KAAT;AACA,WAAKX,QAAL,CAAc;AAAEY,QAAAA,WAAW,EAAE;AAAf,OAAd;AACE,KAlBgB;;AAGlB,SAAKC,KAAL,GAAa;AAAEC,MAAAA,CAAC,EAAE,SAAL;AAAeF,MAAAA,WAAW,EAAE;AAA5B,KAAb;AAEA;;AAgBDG,EAAAA,MAAM,GAAG;AACR,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAO,MAAA,GAAG,EAAET,KAAK,IAAK,KAAKJ,MAAL,GAAcI,KAApC;AACQ,MAAA,KAAK,EAAC,mBADd;AACkC,MAAA,QAAQ,EAAE,KAAKP,iBADjD;AACoE,MAAA,KAAK,EAAC,aAD1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,EAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHD,CADD;AAOA;;AA9BgC,C,CAiClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeH,SAAf","sourcesContent":["import React, { Component } from 'react';\nimport './index.css';\nimport Headers  from './emoji';\nclass inputlist extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = { a: 'twinkle',copySuccess: ''\n\t };\n\t}\n\thandleInputChange = () => {\n\t\tthis.setState({\n\t\t\tquery: this.search.value,\n\t\t});\n\t};\n\tcopyToClipboard = (e) => {\n\t\tthis.input.select();\n\t\tdocument.execCommand('copy');\n\t\t// This is just personal preference.\n\t\t// I prefer to not show the the whole text area selected.\n\t\te.target.focus();\n\t\tthis.setState({ copySuccess: 'Copied!' });\n\t  };\n\t\n\n\trender() {\n\t\treturn (\n\t\t\t<form>\n\t\t\t\t<input ref={input => (this.search = input)} \n            value='Some text to copy' onChange={this.handleInputChange} class=\"searchinput\" />\n\t\t\t\t<p />\n\t\t\t</form>\n\t\t);\n\t}\n}\n\n//     render(){\n//         return(<div className=\"component-search-input\">\n//         <div>\n//           <input type=\"text\" class=\"searchinput\" />\n//         </div>\n//       </div>)\n//     }\n// }\n\nexport default inputlist;\n"]},"metadata":{},"sourceType":"module"}