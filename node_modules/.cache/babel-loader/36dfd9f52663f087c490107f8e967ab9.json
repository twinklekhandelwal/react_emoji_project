{"ast":null,"code":"var _jsxFileName = \"/home/ravina/Desktop/React_project/Emoji/src/result.js\";\nimport React from 'react';\n\nclass CopyExample extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.copyToClipboard = e => {\n      this.textArea.select();\n      document.execCommand('copy'); // This is just personal preference.\n      // I prefer to not show the the whole text area selected.\n\n      e.target.focus();\n      this.setState({\n        copySuccess: 'Copied!'\n      });\n    };\n\n    this.state = {\n      copySuccess: ''\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    },\n    /* Logical shortcut for only displaying the \n       button if the copy command exists */\n    document.queryCommandSupported('copy') && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.copyToClipboard,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, \"Copy\"), this.state.copySuccess), React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(\"textarea\", {\n      ref: textarea => this.textArea = textarea,\n      value: \"Some text to copy\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/home/ravina/Desktop/React_project/Emoji/src/result.js"],"names":["React","CopyExample","Component","constructor","props","copyToClipboard","e","textArea","select","document","execCommand","target","focus","setState","copySuccess","state","render","queryCommandSupported","textarea"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,WAAN,SAA0BD,KAAK,CAACE,SAAhC,CAA0C;AAExCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAMnBC,eANmB,GAMAC,CAAD,IAAO;AACvB,WAAKC,QAAL,CAAcC,MAAd;AACAC,MAAAA,QAAQ,CAACC,WAAT,CAAqB,MAArB,EAFuB,CAGvB;AACA;;AACAJ,MAAAA,CAAC,CAACK,MAAF,CAASC,KAAT;AACA,WAAKC,QAAL,CAAc;AAAEC,QAAAA,WAAW,EAAE;AAAf,OAAd;AACD,KAbkB;;AAGjB,SAAKC,KAAL,GAAa;AAAED,MAAAA,WAAW,EAAE;AAAf,KAAb;AACD;;AAWDE,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEG;;AAEAP,IAAAA,QAAQ,CAACQ,qBAAT,CAA+B,MAA/B,KACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,OAAO,EAAE,KAAKZ,eAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEG,KAAKU,KAAL,CAAWD,WAFd,CALJ,EAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,GAAG,EAAGI,QAAD,IAAc,KAAKX,QAAL,GAAgBW,QADrC;AAEE,MAAA,KAAK,EAAC,mBAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAVF,CADF;AAmBD;;AArCuC","sourcesContent":["import React from 'react';\n\nclass CopyExample extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = { copySuccess: '' }\n  }\n\n  copyToClipboard = (e) => {\n    this.textArea.select();\n    document.execCommand('copy');\n    // This is just personal preference.\n    // I prefer to not show the the whole text area selected.\n    e.target.focus();\n    this.setState({ copySuccess: 'Copied!' });\n  };\n\n  render() {\n    return (\n      <div>\n        {\n         /* Logical shortcut for only displaying the \n            button if the copy command exists */\n         document.queryCommandSupported('copy') &&\n          <div>\n            <button onClick={this.copyToClipboard}>Copy</button> \n            {this.state.copySuccess}\n          </div>\n        }\n        <form>\n          <textarea\n            ref={(textarea) => this.textArea = textarea}\n            value='Some text to copy'\n          />\n        </form>\n      </div>\n    );\n  }\n\n}"]},"metadata":{},"sourceType":"module"}